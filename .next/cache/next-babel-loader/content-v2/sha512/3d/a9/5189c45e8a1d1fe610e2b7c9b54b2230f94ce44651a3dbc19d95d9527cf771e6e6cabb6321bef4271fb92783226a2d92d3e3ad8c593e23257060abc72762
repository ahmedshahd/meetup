{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/zalouma/Desktop/Projects/meet-up/pages/[meetupId]/index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = () => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupDate.image,\n    title: props.meetupDate.title,\n    address: props.meetupDate.address,\n    description: props.meetupDate.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://ahmed:1234@cluster0.eebz1.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const {\n    meetupId\n  } = context.params;\n  const client = await MongoClient.connect(\"mongodb+srv://ahmed:1234@cluster0.eebz1.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.find({\n    _id: meetupId\n  }).toArray();\n  client.close();\n  return {\n    props: {\n      meetupDate: {\n        id: selectedMeetup._id.toString(),\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n        title: selectedMeetup.title,\n        address: selectedMeetup.address\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/zalouma/Desktop/Projects/meet-up/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","meetupDate","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","id"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AACA,MAAMC,aAAa,GAAG,MAAM;AAC1B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEC,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAUA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,yFADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAM;AAAEH,IAAAA;AAAF,MAAeG,OAAO,CAACJ,MAA7B;AACA,QAAMd,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,yFADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAC3CG,IAD0B,CACrB;AAAEC,IAAAA,GAAG,EAAEQ;AAAP,GADqB,EAE1BP,OAF0B,EAA7B;AAGAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV0B,QAAAA,EAAE,EAAED,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVrB,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAFZ;AAGVG,QAAAA,WAAW,EAAEqB,cAAc,CAACrB,WAHlB;AAIVF,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAJZ;AAKVC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB;AALd;AADP;AADF,GAAP;AAWD;AACD,eAAeL,aAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nconst MeetupDetails = () => {\n  return (\n    <MeetupDetail\n      image={props.meetupDate.image}\n      title={props.meetupDate.title}\n      address={props.meetupDate.address}\n      description={props.meetupDate.description}\n    />\n  );\n};\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://ahmed:1234@cluster0.eebz1.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const { meetupId } = context.params;\n  const client = await MongoClient.connect(\n    \"mongodb+srv://ahmed:1234@cluster0.eebz1.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection\n    .find({ _id: meetupId })\n    .toArray();\n  client.close();\n  return {\n    props: {\n      meetupDate: {\n        id: selectedMeetup._id.toString(),\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n      },\n    },\n  };\n}\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}